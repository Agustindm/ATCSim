// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ATCDisplay.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <ATCDisplay.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __ATCDisplay__AirportInterface__getFlights_name = "getFlights";

static const ::std::string __ATCDisplay__AirportInterface__getAirportInfo_name = "getAirportInfo";

static const ::std::string __ATCDisplay__AirportInterface__UpdateSimT_name = "UpdateSimT";

static const ::std::string __ATCDisplay__AirportInterface__NextFocus_name = "NextFocus";

static const ::std::string __ATCDisplay__AirportInterface__getSimT_name = "getSimT";

static const ::std::string __ATCDisplay__AirportInterface__getMaxFlights_name = "getMaxFlights";

static const ::std::string __ATCDisplay__AirportInterface__getPoints_name = "getPoints";

::Ice::Object* IceInternal::upCast(::ATCDisplay::AirportInterface* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::ATCDisplay::AirportInterface* p) { return p; }

void
ATCDisplay::__read(::IceInternal::BasicStream* __is, ::ATCDisplay::AirportInterfacePrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::ATCDisplay::AirportInterface;
        v->__copyFrom(proxy);
    }
}

void
ATCDisplay::ATCDPosition::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(x);
    __os->write(y);
    __os->write(z);
}

void
ATCDisplay::ATCDPosition::__read(::IceInternal::BasicStream* __is)
{
    __is->read(x);
    __is->read(y);
    __is->read(z);
}

void
ATCDisplay::__writeATCDRoute(::IceInternal::BasicStream* __os, const ::ATCDisplay::ATCDPosition* begin, const ::ATCDisplay::ATCDPosition* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
ATCDisplay::__readATCDRoute(::IceInternal::BasicStream* __is, ::ATCDisplay::ATCDRoute& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(12, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
ATCDisplay::ATCDFlight::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(points);
    __os->write(speed);
    __os->write(focused);
    __os->write(id);
    pos.__write(__os);
    __os->write(inclination);
    __os->write(bearing);
    __os->write(collisionRadious);
    if(flightRoute.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::ATCDisplay::__writeATCDRoute(__os, &flightRoute[0], &flightRoute[0] + flightRoute.size());
    }
}

void
ATCDisplay::ATCDFlight::__read(::IceInternal::BasicStream* __is)
{
    __is->read(points);
    __is->read(speed);
    __is->read(focused);
    __is->read(id);
    pos.__read(__is);
    __is->read(inclination);
    __is->read(bearing);
    __is->read(collisionRadious);
    ::ATCDisplay::__readATCDRoute(__is, flightRoute);
}

void
ATCDisplay::__writeATCDFlights(::IceInternal::BasicStream* __os, const ::ATCDisplay::ATCDFlight* begin, const ::ATCDisplay::ATCDFlight* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
ATCDisplay::__readATCDFlights(::IceInternal::BasicStream* __is, ::ATCDisplay::ATCDFlights& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(35, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
ATCDisplay::ATCDLandStrip::__write(::IceInternal::BasicStream* __os) const
{
    pos.__write(__os);
    __os->write(width);
    __os->write(length);
    __os->write(orientation);
}

void
ATCDisplay::ATCDLandStrip::__read(::IceInternal::BasicStream* __is)
{
    pos.__read(__is);
    __is->read(width);
    __is->read(length);
    __is->read(orientation);
}

void
ATCDisplay::__writeATCDLandStrips(::IceInternal::BasicStream* __os, const ::ATCDisplay::ATCDLandStrip* begin, const ::ATCDisplay::ATCDLandStrip* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
ATCDisplay::__readATCDLandStrips(::IceInternal::BasicStream* __is, ::ATCDisplay::ATCDLandStrips& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(24, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
ATCDisplay::ATCDAirport::__write(::IceInternal::BasicStream* __os) const
{
    if(airportLandstrips.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::ATCDisplay::__writeATCDLandStrips(__os, &airportLandstrips[0], &airportLandstrips[0] + airportLandstrips.size());
    }
    __os->write(radious);
}

void
ATCDisplay::ATCDAirport::__read(::IceInternal::BasicStream* __is)
{
    ::ATCDisplay::__readATCDLandStrips(__is, airportLandstrips);
    __is->read(radious);
}

::ATCDisplay::ATCDFlights
IceProxy::ATCDisplay::AirportInterface::getFlights(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__ATCDisplay__AirportInterface__getFlights_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::ATCDisplay::AirportInterface* __del = dynamic_cast< ::IceDelegate::ATCDisplay::AirportInterface*>(__delBase.get());
            return __del->getFlights(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::begin_getFlights(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__ATCDisplay__AirportInterface__getFlights_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __ATCDisplay__AirportInterface__getFlights_name, __del, __cookie);
    try
    {
        __result->__prepare(__ATCDisplay__AirportInterface__getFlights_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::ATCDisplay::ATCDFlights
IceProxy::ATCDisplay::AirportInterface::end_getFlights(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __ATCDisplay__AirportInterface__getFlights_name);
    ::ATCDisplay::ATCDFlights __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::ATCDisplay::__readATCDFlights(__is, __ret);
    __is->endReadEncaps();
    return __ret;
}

::ATCDisplay::ATCDAirport
IceProxy::ATCDisplay::AirportInterface::getAirportInfo(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__ATCDisplay__AirportInterface__getAirportInfo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::ATCDisplay::AirportInterface* __del = dynamic_cast< ::IceDelegate::ATCDisplay::AirportInterface*>(__delBase.get());
            return __del->getAirportInfo(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::begin_getAirportInfo(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__ATCDisplay__AirportInterface__getAirportInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __ATCDisplay__AirportInterface__getAirportInfo_name, __del, __cookie);
    try
    {
        __result->__prepare(__ATCDisplay__AirportInterface__getAirportInfo_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::ATCDisplay::ATCDAirport
IceProxy::ATCDisplay::AirportInterface::end_getAirportInfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __ATCDisplay__AirportInterface__getAirportInfo_name);
    ::ATCDisplay::ATCDAirport __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __ret.__read(__is);
    __is->endReadEncaps();
    return __ret;
}

void
IceProxy::ATCDisplay::AirportInterface::UpdateSimT(::Ice::Float inc, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::ATCDisplay::AirportInterface* __del = dynamic_cast< ::IceDelegate::ATCDisplay::AirportInterface*>(__delBase.get());
            __del->UpdateSimT(inc, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::begin_UpdateSimT(::Ice::Float inc, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __ATCDisplay__AirportInterface__UpdateSimT_name, __del, __cookie);
    try
    {
        __result->__prepare(__ATCDisplay__AirportInterface__UpdateSimT_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(inc);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::ATCDisplay::AirportInterface::end_UpdateSimT(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __ATCDisplay__AirportInterface__UpdateSimT_name);
}

void
IceProxy::ATCDisplay::AirportInterface::NextFocus(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::ATCDisplay::AirportInterface* __del = dynamic_cast< ::IceDelegate::ATCDisplay::AirportInterface*>(__delBase.get());
            __del->NextFocus(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::begin_NextFocus(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __ATCDisplay__AirportInterface__NextFocus_name, __del, __cookie);
    try
    {
        __result->__prepare(__ATCDisplay__AirportInterface__NextFocus_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::ATCDisplay::AirportInterface::end_NextFocus(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __ATCDisplay__AirportInterface__NextFocus_name);
}

::Ice::Float
IceProxy::ATCDisplay::AirportInterface::getSimT(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__ATCDisplay__AirportInterface__getSimT_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::ATCDisplay::AirportInterface* __del = dynamic_cast< ::IceDelegate::ATCDisplay::AirportInterface*>(__delBase.get());
            return __del->getSimT(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::begin_getSimT(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__ATCDisplay__AirportInterface__getSimT_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __ATCDisplay__AirportInterface__getSimT_name, __del, __cookie);
    try
    {
        __result->__prepare(__ATCDisplay__AirportInterface__getSimT_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Float
IceProxy::ATCDisplay::AirportInterface::end_getSimT(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __ATCDisplay__AirportInterface__getSimT_name);
    ::Ice::Float __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::ATCDisplay::AirportInterface::getMaxFlights(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__ATCDisplay__AirportInterface__getMaxFlights_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::ATCDisplay::AirportInterface* __del = dynamic_cast< ::IceDelegate::ATCDisplay::AirportInterface*>(__delBase.get());
            return __del->getMaxFlights(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::begin_getMaxFlights(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__ATCDisplay__AirportInterface__getMaxFlights_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __ATCDisplay__AirportInterface__getMaxFlights_name, __del, __cookie);
    try
    {
        __result->__prepare(__ATCDisplay__AirportInterface__getMaxFlights_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::ATCDisplay::AirportInterface::end_getMaxFlights(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __ATCDisplay__AirportInterface__getMaxFlights_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::ATCDisplay::AirportInterface::getPoints(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__ATCDisplay__AirportInterface__getPoints_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::ATCDisplay::AirportInterface* __del = dynamic_cast< ::IceDelegate::ATCDisplay::AirportInterface*>(__delBase.get());
            return __del->getPoints(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::begin_getPoints(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__ATCDisplay__AirportInterface__getPoints_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __ATCDisplay__AirportInterface__getPoints_name, __del, __cookie);
    try
    {
        __result->__prepare(__ATCDisplay__AirportInterface__getPoints_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::ATCDisplay::AirportInterface::end_getPoints(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __ATCDisplay__AirportInterface__getPoints_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

const ::std::string&
IceProxy::ATCDisplay::AirportInterface::ice_staticId()
{
    return ::ATCDisplay::AirportInterface::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::ATCDisplay::AirportInterface::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::ATCDisplay::AirportInterface);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::ATCDisplay::AirportInterface::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::ATCDisplay::AirportInterface);
}

::IceProxy::Ice::Object*
IceProxy::ATCDisplay::AirportInterface::__newInstance() const
{
    return new AirportInterface;
}

::ATCDisplay::ATCDFlights
IceDelegateM::ATCDisplay::AirportInterface::getFlights(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __ATCDisplay__AirportInterface__getFlights_name, ::Ice::Idempotent, __context);
    bool __ok = __og.invoke();
    ::ATCDisplay::ATCDFlights __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::ATCDisplay::__readATCDFlights(__is, __ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::ATCDisplay::ATCDAirport
IceDelegateM::ATCDisplay::AirportInterface::getAirportInfo(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __ATCDisplay__AirportInterface__getAirportInfo_name, ::Ice::Idempotent, __context);
    bool __ok = __og.invoke();
    ::ATCDisplay::ATCDAirport __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __ret.__read(__is);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::ATCDisplay::AirportInterface::UpdateSimT(::Ice::Float inc, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __ATCDisplay__AirportInterface__UpdateSimT_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(inc);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::ATCDisplay::AirportInterface::NextFocus(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __ATCDisplay__AirportInterface__NextFocus_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::Float
IceDelegateM::ATCDisplay::AirportInterface::getSimT(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __ATCDisplay__AirportInterface__getSimT_name, ::Ice::Idempotent, __context);
    bool __ok = __og.invoke();
    ::Ice::Float __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::ATCDisplay::AirportInterface::getMaxFlights(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __ATCDisplay__AirportInterface__getMaxFlights_name, ::Ice::Idempotent, __context);
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::ATCDisplay::AirportInterface::getPoints(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __ATCDisplay__AirportInterface__getPoints_name, ::Ice::Idempotent, __context);
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::ATCDisplay::ATCDFlights
IceDelegateD::ATCDisplay::AirportInterface::getFlights(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::ATCDisplay::ATCDFlights& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::ATCDisplay::AirportInterface* servant = dynamic_cast< ::ATCDisplay::AirportInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getFlights(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::ATCDisplay::ATCDFlights& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __ATCDisplay__AirportInterface__getFlights_name, ::Ice::Idempotent, __context);
    ::ATCDisplay::ATCDFlights __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::ATCDisplay::ATCDAirport
IceDelegateD::ATCDisplay::AirportInterface::getAirportInfo(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::ATCDisplay::ATCDAirport& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::ATCDisplay::AirportInterface* servant = dynamic_cast< ::ATCDisplay::AirportInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getAirportInfo(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::ATCDisplay::ATCDAirport& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __ATCDisplay__AirportInterface__getAirportInfo_name, ::Ice::Idempotent, __context);
    ::ATCDisplay::ATCDAirport __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::ATCDisplay::AirportInterface::UpdateSimT(::Ice::Float inc, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Float inc, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_inc(inc)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::ATCDisplay::AirportInterface* servant = dynamic_cast< ::ATCDisplay::AirportInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->UpdateSimT(_m_inc, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Float _m_inc;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __ATCDisplay__AirportInterface__UpdateSimT_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(inc, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::ATCDisplay::AirportInterface::NextFocus(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::ATCDisplay::AirportInterface* servant = dynamic_cast< ::ATCDisplay::AirportInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->NextFocus(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __ATCDisplay__AirportInterface__NextFocus_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Float
IceDelegateD::ATCDisplay::AirportInterface::getSimT(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Float& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::ATCDisplay::AirportInterface* servant = dynamic_cast< ::ATCDisplay::AirportInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getSimT(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Float& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __ATCDisplay__AirportInterface__getSimT_name, ::Ice::Idempotent, __context);
    ::Ice::Float __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::ATCDisplay::AirportInterface::getMaxFlights(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::ATCDisplay::AirportInterface* servant = dynamic_cast< ::ATCDisplay::AirportInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getMaxFlights(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __ATCDisplay__AirportInterface__getMaxFlights_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::ATCDisplay::AirportInterface::getPoints(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::ATCDisplay::AirportInterface* servant = dynamic_cast< ::ATCDisplay::AirportInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getPoints(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __ATCDisplay__AirportInterface__getPoints_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ObjectPtr
ATCDisplay::AirportInterface::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __ATCDisplay__AirportInterface_ids[2] =
{
    "::ATCDisplay::AirportInterface",
    "::Ice::Object"
};

bool
ATCDisplay::AirportInterface::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__ATCDisplay__AirportInterface_ids, __ATCDisplay__AirportInterface_ids + 2, _s);
}

::std::vector< ::std::string>
ATCDisplay::AirportInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__ATCDisplay__AirportInterface_ids[0], &__ATCDisplay__AirportInterface_ids[2]);
}

const ::std::string&
ATCDisplay::AirportInterface::ice_id(const ::Ice::Current&) const
{
    return __ATCDisplay__AirportInterface_ids[0];
}

const ::std::string&
ATCDisplay::AirportInterface::ice_staticId()
{
    return __ATCDisplay__AirportInterface_ids[0];
}

::Ice::DispatchStatus
ATCDisplay::AirportInterface::___getFlights(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::ATCDisplay::ATCDFlights __ret = getFlights(__current);
    if(__ret.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::ATCDisplay::__writeATCDFlights(__os, &__ret[0], &__ret[0] + __ret.size());
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
ATCDisplay::AirportInterface::___getAirportInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::ATCDisplay::ATCDAirport __ret = getAirportInfo(__current);
    __ret.__write(__os);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
ATCDisplay::AirportInterface::___UpdateSimT(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Float inc;
    __is->read(inc);
    __is->endReadEncaps();
    UpdateSimT(inc, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
ATCDisplay::AirportInterface::___NextFocus(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    NextFocus(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
ATCDisplay::AirportInterface::___getSimT(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Float __ret = getSimT(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
ATCDisplay::AirportInterface::___getMaxFlights(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = getMaxFlights(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
ATCDisplay::AirportInterface::___getPoints(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = getPoints(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

static ::std::string __ATCDisplay__AirportInterface_all[] =
{
    "NextFocus",
    "UpdateSimT",
    "getAirportInfo",
    "getFlights",
    "getMaxFlights",
    "getPoints",
    "getSimT",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
ATCDisplay::AirportInterface::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__ATCDisplay__AirportInterface_all, __ATCDisplay__AirportInterface_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __ATCDisplay__AirportInterface_all)
    {
        case 0:
        {
            return ___NextFocus(in, current);
        }
        case 1:
        {
            return ___UpdateSimT(in, current);
        }
        case 2:
        {
            return ___getAirportInfo(in, current);
        }
        case 3:
        {
            return ___getFlights(in, current);
        }
        case 4:
        {
            return ___getMaxFlights(in, current);
        }
        case 5:
        {
            return ___getPoints(in, current);
        }
        case 6:
        {
            return ___getSimT(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
ATCDisplay::AirportInterface::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
ATCDisplay::AirportInterface::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
ATCDisplay::AirportInterface::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type ATCDisplay::AirportInterface was not generated with stream support";
    throw ex;
}

void
ATCDisplay::AirportInterface::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type ATCDisplay::AirportInterface was not generated with stream support";
    throw ex;
}
#endif

void 
ATCDisplay::__patch__AirportInterfacePtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::ATCDisplay::AirportInterfacePtr* p = static_cast< ::ATCDisplay::AirportInterfacePtr*>(__addr);
    assert(p);
    *p = ::ATCDisplay::AirportInterfacePtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::ATCDisplay::AirportInterface::ice_staticId(), v->ice_id());
    }
}
