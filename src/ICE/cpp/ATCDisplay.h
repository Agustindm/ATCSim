// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ATCDisplay.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ___home_paco_git_ATCSim_src_ICE_cpp_ATCDisplay_h__
#define ___home_paco_git_ATCSim_src_ICE_cpp_ATCDisplay_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace ATCDisplay
{

class AirportInterface;

}

}

namespace ATCDisplay
{

class AirportInterface;
bool operator==(const AirportInterface&, const AirportInterface&);
bool operator<(const AirportInterface&, const AirportInterface&);

}

namespace IceInternal
{

::Ice::Object* upCast(::ATCDisplay::AirportInterface*);
::IceProxy::Ice::Object* upCast(::IceProxy::ATCDisplay::AirportInterface*);

}

namespace ATCDisplay
{

typedef ::IceInternal::Handle< ::ATCDisplay::AirportInterface> AirportInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::ATCDisplay::AirportInterface> AirportInterfacePrx;

void __read(::IceInternal::BasicStream*, AirportInterfacePrx&);
void __patch__AirportInterfacePtr(void*, ::Ice::ObjectPtr&);

}

namespace ATCDisplay
{

struct ATCDPosition
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;

    bool operator==(const ATCDPosition& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        if(z != __rhs.z)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ATCDPosition& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        if(z < __rhs.z)
        {
            return true;
        }
        else if(__rhs.z < z)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ATCDPosition& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ATCDPosition& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ATCDPosition& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ATCDPosition& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::ATCDisplay::ATCDPosition> ATCDRoute;
void __writeATCDRoute(::IceInternal::BasicStream*, const ::ATCDisplay::ATCDPosition*, const ::ATCDisplay::ATCDPosition*);
void __readATCDRoute(::IceInternal::BasicStream*, ATCDRoute&);

struct ATCDFlight
{
    ::Ice::Float points;
    ::Ice::Float speed;
    bool focused;
    ::std::string id;
    ::ATCDisplay::ATCDPosition pos;
    ::Ice::Float inclination;
    ::Ice::Float bearing;
    ::Ice::Float collisionRadious;
    ::ATCDisplay::ATCDRoute flightRoute;

    bool operator==(const ATCDFlight& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(points != __rhs.points)
        {
            return false;
        }
        if(speed != __rhs.speed)
        {
            return false;
        }
        if(focused != __rhs.focused)
        {
            return false;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(pos != __rhs.pos)
        {
            return false;
        }
        if(inclination != __rhs.inclination)
        {
            return false;
        }
        if(bearing != __rhs.bearing)
        {
            return false;
        }
        if(collisionRadious != __rhs.collisionRadious)
        {
            return false;
        }
        if(flightRoute != __rhs.flightRoute)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ATCDFlight& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(points < __rhs.points)
        {
            return true;
        }
        else if(__rhs.points < points)
        {
            return false;
        }
        if(speed < __rhs.speed)
        {
            return true;
        }
        else if(__rhs.speed < speed)
        {
            return false;
        }
        if(focused < __rhs.focused)
        {
            return true;
        }
        else if(__rhs.focused < focused)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(pos < __rhs.pos)
        {
            return true;
        }
        else if(__rhs.pos < pos)
        {
            return false;
        }
        if(inclination < __rhs.inclination)
        {
            return true;
        }
        else if(__rhs.inclination < inclination)
        {
            return false;
        }
        if(bearing < __rhs.bearing)
        {
            return true;
        }
        else if(__rhs.bearing < bearing)
        {
            return false;
        }
        if(collisionRadious < __rhs.collisionRadious)
        {
            return true;
        }
        else if(__rhs.collisionRadious < collisionRadious)
        {
            return false;
        }
        if(flightRoute < __rhs.flightRoute)
        {
            return true;
        }
        else if(__rhs.flightRoute < flightRoute)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ATCDFlight& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ATCDFlight& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ATCDFlight& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ATCDFlight& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::ATCDisplay::ATCDFlight> ATCDFlights;
void __writeATCDFlights(::IceInternal::BasicStream*, const ::ATCDisplay::ATCDFlight*, const ::ATCDisplay::ATCDFlight*);
void __readATCDFlights(::IceInternal::BasicStream*, ATCDFlights&);

struct ATCDLandStrip
{
    ::ATCDisplay::ATCDPosition pos;
    ::Ice::Float width;
    ::Ice::Float length;
    ::Ice::Float orientation;

    bool operator==(const ATCDLandStrip& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(pos != __rhs.pos)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        if(length != __rhs.length)
        {
            return false;
        }
        if(orientation != __rhs.orientation)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ATCDLandStrip& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(pos < __rhs.pos)
        {
            return true;
        }
        else if(__rhs.pos < pos)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        if(length < __rhs.length)
        {
            return true;
        }
        else if(__rhs.length < length)
        {
            return false;
        }
        if(orientation < __rhs.orientation)
        {
            return true;
        }
        else if(__rhs.orientation < orientation)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ATCDLandStrip& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ATCDLandStrip& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ATCDLandStrip& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ATCDLandStrip& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::ATCDisplay::ATCDLandStrip> ATCDLandStrips;
void __writeATCDLandStrips(::IceInternal::BasicStream*, const ::ATCDisplay::ATCDLandStrip*, const ::ATCDisplay::ATCDLandStrip*);
void __readATCDLandStrips(::IceInternal::BasicStream*, ATCDLandStrips&);

struct ATCDAirport
{
    ::ATCDisplay::ATCDLandStrips airportLandstrips;
    ::Ice::Float radious;

    bool operator==(const ATCDAirport& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(airportLandstrips != __rhs.airportLandstrips)
        {
            return false;
        }
        if(radious != __rhs.radious)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ATCDAirport& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(airportLandstrips < __rhs.airportLandstrips)
        {
            return true;
        }
        else if(__rhs.airportLandstrips < airportLandstrips)
        {
            return false;
        }
        if(radious < __rhs.radious)
        {
            return true;
        }
        else if(__rhs.radious < radious)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ATCDAirport& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ATCDAirport& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ATCDAirport& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ATCDAirport& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

}

namespace ATCDisplay
{

class Callback_AirportInterface_getFlights_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getFlights_Base> Callback_AirportInterface_getFlightsPtr;

class Callback_AirportInterface_getAirportInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getAirportInfo_Base> Callback_AirportInterface_getAirportInfoPtr;

class Callback_AirportInterface_UpdateSimT_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_UpdateSimT_Base> Callback_AirportInterface_UpdateSimTPtr;

class Callback_AirportInterface_NextFocus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_NextFocus_Base> Callback_AirportInterface_NextFocusPtr;

class Callback_AirportInterface_getSimT_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getSimT_Base> Callback_AirportInterface_getSimTPtr;

class Callback_AirportInterface_getMaxFlights_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getMaxFlights_Base> Callback_AirportInterface_getMaxFlightsPtr;

class Callback_AirportInterface_getPoints_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getPoints_Base> Callback_AirportInterface_getPointsPtr;

}

namespace IceProxy
{

namespace ATCDisplay
{

class AirportInterface : virtual public ::IceProxy::Ice::Object
{
public:

    ::ATCDisplay::ATCDFlights getFlights()
    {
        return getFlights(0);
    }
    ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Context& __ctx)
    {
        return getFlights(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getFlights()
    {
        return begin_getFlights(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::Context& __ctx)
    {
        return begin_getFlights(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFlights(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFlights(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::ATCDisplay::Callback_AirportInterface_getFlightsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFlights(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_getFlightsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFlights(&__ctx, __del, __cookie);
    }

    ::ATCDisplay::ATCDFlights end_getFlights(const ::Ice::AsyncResultPtr&);
    
private:

    ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::ATCDisplay::ATCDAirport getAirportInfo()
    {
        return getAirportInfo(0);
    }
    ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Context& __ctx)
    {
        return getAirportInfo(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo()
    {
        return begin_getAirportInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::Context& __ctx)
    {
        return begin_getAirportInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAirportInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAirportInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::ATCDisplay::Callback_AirportInterface_getAirportInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAirportInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_getAirportInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAirportInfo(&__ctx, __del, __cookie);
    }

    ::ATCDisplay::ATCDAirport end_getAirportInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void UpdateSimT(::Ice::Float inc)
    {
        UpdateSimT(inc, 0);
    }
    void UpdateSimT(::Ice::Float inc, const ::Ice::Context& __ctx)
    {
        UpdateSimT(inc, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float inc)
    {
        return begin_UpdateSimT(inc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float inc, const ::Ice::Context& __ctx)
    {
        return begin_UpdateSimT(inc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float inc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateSimT(inc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float inc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateSimT(inc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float inc, const ::ATCDisplay::Callback_AirportInterface_UpdateSimTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateSimT(inc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float inc, const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_UpdateSimTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateSimT(inc, &__ctx, __del, __cookie);
    }

    void end_UpdateSimT(const ::Ice::AsyncResultPtr&);
    
private:

    void UpdateSimT(::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void NextFocus()
    {
        NextFocus(0);
    }
    void NextFocus(const ::Ice::Context& __ctx)
    {
        NextFocus(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_NextFocus()
    {
        return begin_NextFocus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::Context& __ctx)
    {
        return begin_NextFocus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NextFocus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NextFocus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::ATCDisplay::Callback_AirportInterface_NextFocusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NextFocus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_NextFocusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NextFocus(&__ctx, __del, __cookie);
    }

    void end_NextFocus(const ::Ice::AsyncResultPtr&);
    
private:

    void NextFocus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Float getSimT()
    {
        return getSimT(0);
    }
    ::Ice::Float getSimT(const ::Ice::Context& __ctx)
    {
        return getSimT(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSimT()
    {
        return begin_getSimT(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::Context& __ctx)
    {
        return begin_getSimT(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSimT(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSimT(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::ATCDisplay::Callback_AirportInterface_getSimTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSimT(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_getSimTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSimT(&__ctx, __del, __cookie);
    }

    ::Ice::Float end_getSimT(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Float getSimT(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getMaxFlights()
    {
        return getMaxFlights(0);
    }
    ::Ice::Int getMaxFlights(const ::Ice::Context& __ctx)
    {
        return getMaxFlights(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights()
    {
        return begin_getMaxFlights(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::Context& __ctx)
    {
        return begin_getMaxFlights(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMaxFlights(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMaxFlights(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::ATCDisplay::Callback_AirportInterface_getMaxFlightsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMaxFlights(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_getMaxFlightsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMaxFlights(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getMaxFlights(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getMaxFlights(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getPoints()
    {
        return getPoints(0);
    }
    ::Ice::Int getPoints(const ::Ice::Context& __ctx)
    {
        return getPoints(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPoints()
    {
        return begin_getPoints(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context& __ctx)
    {
        return begin_getPoints(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPoints(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPoints(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::ATCDisplay::Callback_AirportInterface_getPointsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPoints(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context& __ctx, const ::ATCDisplay::Callback_AirportInterface_getPointsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPoints(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getPoints(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getPoints(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AirportInterface> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AirportInterface*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<AirportInterface*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace ATCDisplay
{

class AirportInterface : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Context*) = 0;

    virtual ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Context*) = 0;

    virtual void UpdateSimT(::Ice::Float, const ::Ice::Context*) = 0;

    virtual void NextFocus(const ::Ice::Context*) = 0;

    virtual ::Ice::Float getSimT(const ::Ice::Context*) = 0;

    virtual ::Ice::Int getMaxFlights(const ::Ice::Context*) = 0;

    virtual ::Ice::Int getPoints(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace ATCDisplay
{

class AirportInterface : virtual public ::IceDelegate::ATCDisplay::AirportInterface,
                         virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Context*);

    virtual ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Context*);

    virtual void UpdateSimT(::Ice::Float, const ::Ice::Context*);

    virtual void NextFocus(const ::Ice::Context*);

    virtual ::Ice::Float getSimT(const ::Ice::Context*);

    virtual ::Ice::Int getMaxFlights(const ::Ice::Context*);

    virtual ::Ice::Int getPoints(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace ATCDisplay
{

class AirportInterface : virtual public ::IceDelegate::ATCDisplay::AirportInterface,
                         virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Context*);

    virtual ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Context*);

    virtual void UpdateSimT(::Ice::Float, const ::Ice::Context*);

    virtual void NextFocus(const ::Ice::Context*);

    virtual ::Ice::Float getSimT(const ::Ice::Context*);

    virtual ::Ice::Int getMaxFlights(const ::Ice::Context*);

    virtual ::Ice::Int getPoints(const ::Ice::Context*);
};

}

}

namespace ATCDisplay
{

class AirportInterface : virtual public ::Ice::Object
{
public:

    typedef AirportInterfacePrx ProxyType;
    typedef AirportInterfacePtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFlights(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAirportInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void UpdateSimT(::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___UpdateSimT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void NextFocus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___NextFocus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Float getSimT(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSimT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getMaxFlights(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMaxFlights(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getPoints(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPoints(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const AirportInterface& l, const AirportInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AirportInterface& l, const AirportInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace ATCDisplay
{

template<class T>
class CallbackNC_AirportInterface_getFlights : public Callback_AirportInterface_getFlights_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDFlights&);

    CallbackNC_AirportInterface_getFlights(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::ATCDisplay::ATCDFlights __ret;
        try
        {
            __ret = __proxy->end_getFlights(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AirportInterface_getFlightsPtr
newCallback_AirportInterface_getFlights(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDFlights&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getFlights<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getFlightsPtr
newCallback_AirportInterface_getFlights(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDFlights&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getFlights<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getFlights : public Callback_AirportInterface_getFlights_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDFlights&, const CT&);

    Callback_AirportInterface_getFlights(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::ATCDisplay::ATCDFlights __ret;
        try
        {
            __ret = __proxy->end_getFlights(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AirportInterface_getFlightsPtr
newCallback_AirportInterface_getFlights(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDFlights&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getFlights<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getFlightsPtr
newCallback_AirportInterface_getFlights(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDFlights&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getFlights<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getAirportInfo : public Callback_AirportInterface_getAirportInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDAirport&);

    CallbackNC_AirportInterface_getAirportInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::ATCDisplay::ATCDAirport __ret;
        try
        {
            __ret = __proxy->end_getAirportInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AirportInterface_getAirportInfoPtr
newCallback_AirportInterface_getAirportInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDAirport&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getAirportInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getAirportInfoPtr
newCallback_AirportInterface_getAirportInfo(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDAirport&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getAirportInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getAirportInfo : public Callback_AirportInterface_getAirportInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDAirport&, const CT&);

    Callback_AirportInterface_getAirportInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::ATCDisplay::ATCDAirport __ret;
        try
        {
            __ret = __proxy->end_getAirportInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AirportInterface_getAirportInfoPtr
newCallback_AirportInterface_getAirportInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDAirport&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getAirportInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getAirportInfoPtr
newCallback_AirportInterface_getAirportInfo(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDAirport&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getAirportInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_UpdateSimT : public Callback_AirportInterface_UpdateSimT_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AirportInterface_UpdateSimT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_UpdateSimT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_UpdateSimT<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_UpdateSimT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_UpdateSimT<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_UpdateSimT : public Callback_AirportInterface_UpdateSimT_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AirportInterface_UpdateSimT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_UpdateSimT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_UpdateSimT<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_UpdateSimT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_UpdateSimT<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_NextFocus : public Callback_AirportInterface_NextFocus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AirportInterface_NextFocus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_NextFocus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_NextFocus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_NextFocus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_NextFocus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_NextFocus : public Callback_AirportInterface_NextFocus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AirportInterface_NextFocus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_NextFocus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_NextFocus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_NextFocus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_NextFocus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getSimT : public Callback_AirportInterface_getSimT_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_AirportInterface_getSimT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getSimT(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AirportInterface_getSimTPtr
newCallback_AirportInterface_getSimT(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getSimT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getSimTPtr
newCallback_AirportInterface_getSimT(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getSimT<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getSimT : public Callback_AirportInterface_getSimT_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_AirportInterface_getSimT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getSimT(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AirportInterface_getSimTPtr
newCallback_AirportInterface_getSimT(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getSimT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getSimTPtr
newCallback_AirportInterface_getSimT(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getSimT<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getMaxFlights : public Callback_AirportInterface_getMaxFlights_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AirportInterface_getMaxFlights(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getMaxFlights(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AirportInterface_getMaxFlightsPtr
newCallback_AirportInterface_getMaxFlights(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getMaxFlights<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getMaxFlightsPtr
newCallback_AirportInterface_getMaxFlights(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getMaxFlights<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getMaxFlights : public Callback_AirportInterface_getMaxFlights_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AirportInterface_getMaxFlights(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getMaxFlights(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AirportInterface_getMaxFlightsPtr
newCallback_AirportInterface_getMaxFlights(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getMaxFlights<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getMaxFlightsPtr
newCallback_AirportInterface_getMaxFlights(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getMaxFlights<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getPoints : public Callback_AirportInterface_getPoints_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AirportInterface_getPoints(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getPoints(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AirportInterface_getPointsPtr
newCallback_AirportInterface_getPoints(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getPoints<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getPointsPtr
newCallback_AirportInterface_getPoints(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getPoints<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getPoints : public Callback_AirportInterface_getPoints_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AirportInterface_getPoints(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ATCDisplay::AirportInterfacePrx __proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getPoints(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AirportInterface_getPointsPtr
newCallback_AirportInterface_getPoints(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getPoints<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getPointsPtr
newCallback_AirportInterface_getPoints(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getPoints<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
